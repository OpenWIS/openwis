package org.openwis.dataservice.common.service;

import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Set;

import org.openwis.dataservice.common.domain.bean.DataPolicyOperations;
import org.openwis.dataservice.common.domain.bean.UserDataPolicyOperations;
import org.openwis.dataservice.common.domain.entity.enumeration.SortDirection;
import org.openwis.dataservice.common.domain.entity.enumeration.SubscriptionColumn;
import org.openwis.dataservice.common.domain.entity.request.Parameter;
import org.openwis.dataservice.common.domain.entity.request.ProcessedRequest;
import org.openwis.dataservice.common.domain.entity.request.dissemination.Dissemination;
import org.openwis.dataservice.common.domain.entity.subscription.Frequency;
import org.openwis.dataservice.common.domain.entity.subscription.Subscription;

/**
 * The subscription service. <P>
 */
public interface SubscriptionService {

   /**
    * Create a subscription.
    *
    * @param subscription the subscription to create.
    * @param metadataURN the metadata urn
    * @return the subscription id.
    */
   Long createSubscription(Subscription subscription, String metadataURN);

   /**
    * Delete a subscription using its id.
    * @param id the id.
    */
   void deleteSubscription(Long id);

   /**
    * Gets a subscription using its id.
    * @param id the id.
    * @return an entity using its id.
    */
   Subscription getSubscription(Long id);

   /**
    * Resume a description.
    *
    * @param subscriptionId the subscription id
    */
   void resumeSubscription(Long subscriptionId);

   /**
   * Suspend a subscription.
   *
   * @param subscriptionId the subscription id
   */
   void suspendSubscription(Long subscriptionId);

   /**
    * Sets the backup status of the deployment.
    *
    * @param deployment the deployment
    * @param enable the enable
    * @param dateFrom the date to retro-process missed products
    */
   void setBackup(String deployment, boolean enable, String dateFrom);

   /**
    * Update a subscription.
    *
    * @param subscription the subscription to update.
    * @return the subscription
    */
   Subscription updateSubscription(Subscription subscription);

   /**
    * Update a subscription.
    *
    * @param subscription the subscription to update.
    * @return the subscription
    */
   Subscription updateSubscriptionConfig(Long subscriptionId, Set<Parameter> parameters,
         Dissemination primaryDissemination, Dissemination secondaryDissemination,
         Frequency frequency, String startingDate);

   /**
    * Get full subscription by its id.
    * @param id the id of the subscription.
    * @return the subscription.
    */
   Subscription getFullSubscription(Long id);

   /**
    * Get all subscriptions performed by the given users.
    * @param users the users.
    * @return the subscriptions.
    */
   List<Subscription> getSubscriptionsByUsers(Collection<String> users, int firstResult,
         int maxResults, SubscriptionColumn column, SortDirection sortDirection);

   /**
    * Get count of all subscriptions performed by the given users.
    * @param users the users.
    * @return the count of all subscriptions.
    */
   int getSubscriptionsByUsersCount(Collection<String> users);

   /**
    * Find last processed request by date
    * Description goes here.
    * @param id subscription id
    * @return last processed request
    */
   ProcessedRequest findLastProcessedRequest(Long id);

   // Authorization controls

   /**
    * Check subscriptions.
    *
    * @param user the user
    * @param operationAllowed all allowed operations by DataPolicy
    */
   public void checkUserSubscription(String user, Set<DataPolicyOperations> userOperationsAllowed);

   /**
    * Check subscriptions.
    *
    * @param operationAllowed the operations allowed by user and data policy
    */
   public void checkUsersSubscription(Set<UserDataPolicyOperations> operationsAllowed);

   /**
    * Process recurrent subscriptions.
    *
    * @param subscriptions the subscription
    * @param date the reference date for the processing
    */
   void processRecurrentSubscriptions(Collection<Subscription> subscriptions, Date date);

   /**
    * Process on product arrival subscriptions.
    *
    * @param subscriptions the subscriptions to process
    * @param productDate the new product date
    * @return the collection of ProcessedRequest generated by the processing
    */
   Collection<ProcessedRequest> processEventSubscriptions(List<Subscription> subscriptions,
         String productDate);

}
