#!/usr/bin/env python
#
#   Migrate an OpenWIS JBoss AS 5.1 configuration file into a JBoss AS 7.1
#   configuration file.
#
#   USAGE: ./migrate-config.py <openwis-dataservice-jndi-service.xml> 
#
#   The will produce two files:
#       
#       localdatasourceservice.properties
#       openwis-dataservice.properties
#

import sys
import os.path
import elementtree_local.ElementTree as et
import re

# Blacklisted propertyes from openwis-dataservice.properties.  These won't be replaced when
# executing the migration
OPENWIS_DATASERVICE_BLACKLIST = [
    # Properties referencing EJBs
    "extraction.timer.url",
    "subscription.timer.url",
    "localDataSource.polling.timer.url",
    "processedRequest.service.url",
    "extractionDelegate.url",
    "cache.gts.collection.collectionTimerService.url",
    "cache.gts.collection.splittingTimerService.url",
    "metadata.service.url",
    "cache.cacheManager.url",
    "cache.cacheIndex.url",
    "cache.feeder.url",
    "cache.mailSender.url",
    "cache.gts.feeding.packedFeedingTimerService.url",
    "cache.gts.util.databaseAccessor.url",

	"openwis.management.alertservice.wsdl",
	"openwis.management.controlservice.wsdl",
	"openwis.management.disseminateddatastatistics.wsdl",
	"openwis.management.exchangeddatastatistics.wsdl",
	"openwis.management.replicateddatastatistics.wsdl",
	"openwis.management.ingesteddatastatistics.wsdl"
]

# ----------------------------------------------------------------------------------
#

class DataConfigMigrator(object):
    """Migrator for the openwis-dataservice-jndi-service.xml configuration file.
    """
    
    # Namespaces used within the XML file
    XML_NS = { "jndi": "urn:jboss:jndi-binding-service:1.0", "java": "urn:jboss:java-properties" }

    def __init__(self, srcFilename):
        """Constructor"""
        self.srcFilename = srcFilename
        self.xmlRoot = et.parse(srcFilename)

    def generate_properties_using_template(self, jndiBindingName, outFilename, templateFile, propertyBlacklist):
        """Generates a properties file using the values from the XML config file and a template.
        
        This tasks as arguments a template properties file, and a list of property names to ignore.
        This class will search through the template files and replace the property values from the 
        template file with the corresponding value from the source JNDI XML config file; unless if
        the property is in the blacklist, in which case, the property will be kept as is.
        """
        
        # Index the properties from the original file
        propsFromXmlFile = self._read_properties_from_xml(jndiBindingName)
        propertyNameRegex = re.compile("^([-a-zA-Z0-9._]+)=")
        
        templateFile = open(templateFile, "r")
        f = open(outFilename, "w")
        try:
            for templateLine in templateFile:
                m = propertyNameRegex.match(templateLine)
                if (m):
                    templatePropName = m.group(1)
                    if (templatePropName not in propertyBlacklist):
                        if (templatePropName in propsFromXmlFile):
                            f.write(templatePropName + "=" + propsFromXmlFile[templatePropName] + "\n")
                        else:
                            sys.stderr.write("WARN: Property name '%s' does not exist in XML file\n" % templatePropName)
                            f.write(templateLine)
                    else:
                        f.write(templateLine)
                else:
                    f.write(templateLine)
        finally:
            f.close()
            templateFile.close()
            
    def generate_properties(self, jndiBindingName, outFilename):
        """Generates a properties file using the property binding from the JNDI XML file"""
        f = open(outFilename, "w")
        try:
            f.write("# Generated by migrate-config.py on <date>\n")
            f.write("# Original file: " + self.srcFilename + "\n")
            f.write("# JNDI Binding: " + jndiBindingName + "\n")            
            f.write("#\n")
            f.write("\n")
            
            self.write_out_properties(jndiBindingName, f)
        finally:
            f.close()

    def write_out_properties(self, jndiBindingName, file):
        """Writes out a properties file for the Properties instance bound to the jndiName.
        The Passed in file is a file object which the properties file will be written to."""
        
        propElems = ".//jndi:binding[@name='%s']/java:properties/java:property" % jndiBindingName
        
        for prop in self.xmlRoot.findall(propElems, DataConfigMigrator.XML_NS):
            key = prop.find("java:key", DataConfigMigrator.XML_NS).text
            value = prop.find("java:value", DataConfigMigrator.XML_NS).text
            
            file.write(key + "=" + value + "\n")

    def _read_properties_from_xml(self, jndiBindingName):
        """Returns a dictionary of property keys to values from the original JNDI XML file"""
        props = {}
        propElems = ".//jndi:binding[@name='%s']/java:properties/java:property" % jndiBindingName
        for prop in self.xmlRoot.findall(propElems, DataConfigMigrator.XML_NS):
            key = prop.find("java:key", DataConfigMigrator.XML_NS).text
            value = prop.find("java:value", DataConfigMigrator.XML_NS).text
            if (value != None):
                props[key] = value
            
        return props

#    def _expand_ns(self, xpath):
#        """Expands prefixes within the XPath expression with the actual namespace in curly brackets.
#        This is to support versions of ElementTree which do not support namespace mappings in the find() and
#        findall() methods."""
#        for prefix, namespace in DataConfigMigrator.XML_NS.items():
#            xpath = xpath.replace(prefix + ":", "{" + namespace + "}")
#        return xpath


# ----------------------------------------------------------------------------------
#

scriptDir = os.path.dirname(__file__)

if len(sys.argv) == 1:
    sys.stderr.write("Usage: " + sys.argv[0] + " <openwis-dataservice-jndi-service.xml file>\n")
    sys.exit(1)

jndiSource = sys.argv[1]    
dcm = DataConfigMigrator(jndiSource)

# Migrate openwis-dataservice-jndi-service.xml

dcm.generate_properties_using_template("conf/openwis-dataservice",
    "openwis-dataservice.properties",
    os.path.join(scriptDir, "../config/openwis-dataservice.properties"),
    OPENWIS_DATASERVICE_BLACKLIST)

dcm.generate_properties("ws/localdatasourceservice", 
    "localdatasourceservice.properties")
