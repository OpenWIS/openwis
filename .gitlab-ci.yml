include:
    - project: 'security/template'
      ref: master
      file: gitlab.yml

.sec_script_sast: &sec_script_sast
  - 'echo "SECU_BRANCH_NAME is ${SECU_BRANCH_NAME:=master}"'
  - 'curl --output security_build.sh --header "PRIVATE-TOKEN: ${SECU_PUBLIC_TOKEN}" https://gitlab.akka.eu/api/v4/projects/${SECU_PROJECT}/repository/files/add-on%2Fsecurity_build.sh/raw?ref=${SECU_BRANCH_NAME}'
  - 'chmod +x ./security_build.sh'
  - '[ ${SECU_SAST_ENABLE^^} != "FALSE" ] && (./security_build.sh ${SECU_SONARQUBE_SERVER} ${SECU_SONARQUBE_TOKEN} --CI_PROJECT_DIR=${CI_PROJECT_DIR} ${SECU_BUILD_OPTION} --CI_PIPELINE_ID=$CI_PIPELINE_ID --CI_PROJECT_ID=$CI_PROJECT_ID "--CI_PROJECT_NAME=$CI_PROJECT_NAME" "--CI_PROJECT_TITLE=$CI_PROJECT_TITLE" --JOB_ID=$CI_JOB_ID "--CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME" --CI_COMMIT_SHA=$CI_COMMIT_SHA || exit 1)' 

.only-master-release-develop:
  only:
    - master
    - develop
    - release

stages:
    - build
    - secu

variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=/home/openwis/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  MAVEN_CLI_OPTS: "--batch-mode -s $CI_PROJECT_DIR/resources/settings.xml"
  JAVA_HOME: "/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.el7.x86_64/"
  
cache:
  key: "$CI_COMMIT_REF_NAME"
  paths:
    - .m2/repository/
    - target/

# Needed to compile openwis-portal
openwis-harness:
  extends: .only-master-release-develop
  stage: build
  tags:
    - openwis
  script:
    - export JAVA_HOME=$JAVA_HOME
    - cd openwis-harness
    - mvn $M2_SETTINGS_OPTION install -Popenwis
  artifacts:
    paths:
      - target/classes/
      - target/generated-sources/

# Needed to compile openwis-portal
openwis-portal-wsdl:
  extends: .only-master-release-develop
  stage: build
  tags:
    - openwis
  script:
    - export JAVA_HOME=$JAVA_HOME
    - cd openwis-portal-client
    - mvn $M2_SETTINGS_OPTION install -Popenwis
  artifacts:
    paths:
      - target/classes/
      - target/generated-sources/

openwis-dataservice:
  extends: .only-master-release-develop
  stage: build
  tags:
      - openwis
  script:
    - export JAVA_HOME=$JAVA_HOME
    - cd openwis-dataservice
    - 'echo "M2_SETTINGS_OPTION: ${M2_SETTINGS_OPTION}"'
    - mvn $M2_SETTINGS_OPTION compile -Popenwis
    - SECU_BUILD_OPTION=$SECU_BUILD_OPTION_1
    - 'echo "SECU_BUILD_OPTION: ${SECU_BUILD_OPTION}"'
    - *sec_script_sast
  artifacts:
      paths:
        - target/classes/
        - target/generated-sources/
        - sast_reports.tar
        - ${SECU_PLANNER_AUTHORIZED_FILE_NAME}
        
openwis-metadataportal:
  extends: .only-master-release-develop
  stage: build
  tags:
      - openwis
  script:
    - export JAVA_HOME=$JAVA_HOME
    - cd openwis-metadataportal
    - SECU_BUILD_OPTION=$SECU_BUILD_OPTION_6
    - mvn $M2_SETTINGS_OPTION install -Popenwis,user
    - *sec_script_sast
  artifacts:
      paths:
        - target/classes/
        - target/generated-sources/
        - sast_reports.tar
        - ${SECU_PLANNER_AUTHORIZED_FILE_NAME}

openwis-portal:
  extends: .only-master-release-develop
  stage: build
  tags:
    - openwis
  script:
    - export JAVA_HOME=$JAVA_HOME
    - cd openwis-metadataportal/openwis-portal
    - SECU_BUILD_OPTION=$SECU_BUILD_OPTION_2
    - mvn $M2_SETTINGS_OPTION_PORTAL install -Popenwis
    - *sec_script_sast
  artifacts:
    paths:
      - target/classes/
      - target/generated-sources/
      - sast_reports.tar
      - ${SECU_PLANNER_AUTHORIZED_FILE_NAME}

openwis-management:
  extends: .only-master-release-develop
  stage: build
  tags:
      - openwis
  script:
    - export JAVA_HOME=$JAVA_HOME
    - cd openwis-management
    - SECU_BUILD_OPTION=$SECU_BUILD_OPTION_3
    - mvn $M2_SETTINGS_OPTION install -Popenwis
    - *sec_script_sast
  artifacts:
      paths:
        - target/classes/
        - target/generated-sources/
        - sast_reports.tar
        - ${SECU_PLANNER_AUTHORIZED_FILE_NAME}
        
openwis-securityservice:
  extends: .only-master-release-develop
  stage: build
  tags:
      - openwis
  script:
    - export JAVA_HOME=$JAVA_HOME
    - cd openwis-securityservice
    - SECU_BUILD_OPTION=$SECU_BUILD_OPTION_4
    - mvn $M2_SETTINGS_OPTION compile -Popenwis
    - *sec_script_sast
  artifacts:
      paths:
        - target/classes/
        - target/generated-sources/
        - sast_reports.tar
        - ${SECU_PLANNER_AUTHORIZED_FILE_NAME}


report-dataservice:
  extends: .TriggerSecu
  only:
    - master
    - release
    - develop
  variables:
    SECU_TARGET_JOB_BUILD_NAME: 'openwis-dataservice'

report-metadataportal:
  extends: .TriggerSecu
  only:
    - master
    - release
    - develop
  variables:
    SECU_TARGET_JOB_BUILD_NAME: 'openwis-metadataportal'

report-portal:
  extends: .TriggerSecu
  only:
    - master
    - release
    - develop
  variables:
    SECU_TARGET_JOB_BUILD_NAME: 'openwis-portal'

report-management:
  extends: .TriggerSecu
  only:
    - master
    - release
    - develop
  variables:
    SECU_TARGET_JOB_BUILD_NAME: 'openwis-management'

report-securityservice:
  extends: .TriggerSecu
  only:
    - master
    - release
    - develop
  variables:
    SECU_TARGET_JOB_BUILD_NAME: 'openwis-securityservice'
