## ----------------------------------------------------------------------------
## Java properties file holding the defintion for the template patterns for the
## monitored pre-defined events of the OpenWIS system.
##
## Each entry should have a corresponding pattern and severity level.
##    message.key.identifier.text  = message pattern test
##    message.key.identifier.level = message severity level
##
##  - keys are defined in one of the management interfaces
##    DataServiceAlerts.java, MetadataAlerts.java, SecurityAlerts.java
##  - Message patterns uses patterns of the form defined by the class
##    java.text.MessageFormat syntax
##  - Severity levels, one of: TRACE (lowest), INFO, WARNING, ERROR (highest)
## ----------------------------------------------------------------------------


## ----------------------------------------------------------------------------
## DataService Alters
## ----------------------------------------------------------------------------

# Notifies that a stopgap metadata has been created
# Expected message arguments are:
# <ol>
# <li>filename
# <li>metadata-urn
# </ol>
dataservice.stopgapMetadataCreated.text = No metadata was found for high-priority product {0}. Creating stopgap metadata: {1}.
dataservice.stopgapMetadataCreated.level = WARN  

# Notifies that a specific component cannot operate normally anmyore.
# Expected message arguments are:
# <ol>
# <li>component, specifies the component
# <li>cause, specifies the cause of the problem
# </ol>
dataservice.componentFailure.text = The component {0} is in a degraded state, cause: {1}
dataservice.componentFailure.level = ERROR  

# Notifies that pre-defined thresholds are exceeded. <br>
# Expected message arguments are:
# <ol>
# <li>source, specifies the context
# <li>threshold, specifies the pre-defined threshold
# <li>value, indicates the actual value
# </ol>
dataservice.thresholdExceeded.text = Pre-defined threshold for {0} exceeded: limit={1}, value={2}.
dataservice.thresholdExceeded.level = WARN

# Notifies that the threshold for the chosen dissemination method is exceeded by the user. <br>
# Expected message arguments are:
# <ol>
# <li>threshold, specifies the pre-defined threshold
# <li>value, indicates the actual value
# <li>user, the user that exceeded the threshold
# <li>dissMethod, the chosen dissemination method
# </ol>
dataservice.disseminationThresholdExceeded.text = Threshold for Dissemination method {3} has been exceeded by user {2}: limit={0}, value={1}.
dataservice.disseminationThresholdExceeded.level = WARN  

# Notifies the arrival of critical data. <br>
# Expected message arguments are:
# <ol>
# <li>source, specifies the context
# <li>metadataUrn, from the received product
# <li>criticality, specifies the criticality
# </ol>
#dataservice.criticalDataReceived.text = "Critical data received from {0}: criticality={2}, metadata={1}."
#dataservice.criticalDataReceived.level = WARN

# Notifies the arrival of high priority data. <br>
# Expected message arguments are:
# <ol>
# <li>source, specifies the context
# <li>metadataUrn, from the received product
# <li>priority, specifies the priority
# </ol>
dataservice.highPriorityDataReceived.text = High priority data received from {0}: priority={2}, metadata={1}.
dataservice.highPriorityDataReceived.level = INFO

# Notifies the loss or corruption of data. <br>
# Expected message arguments are:
# <ol>
# <li>source, specifies the context
# <li>filename, from the received product
# <li>cause, specifies the cause for the loss or corruption
# </ol>
dataservice.corruptedDataReceived.text = Corrupted data received from {0}: filename={1}, error={2}.
dataservice.corruptedDataReceived.level = ERROR

# Notifies the arrival of a file with an unparsable name. <br>
# Expected message arguments are:
# <ol>
# <li>source, specifies the context
# <li>filename, from the received product
# </ol>
dataservice.unparsableFile.text = File {1} received from {0} has an unparsable name.
dataservice.unparsableFile.level = ERROR

# Notifies the ingestion of products which are greater than 1 GBytes in
# size. <br>
# Expected message arguments are:
# <ol>
# <li>source, specifies the context
# <li>metadataUrn, from the received product
# <li>productSize, specifies the size of the product
# </ol>
dataservice.largeProductIngestion.text = Ingesting large product received from {0}: metadata={1}, size={2}.
dataservice.largeProductIngestion.level = WARN

# Notifies the ingestion of data for which no metadata record exists. <br>
# Expected message arguments are:
# <ol>
# <li>source, specifies the context
# <li>productId, identifies the product
# <li>productSize, specifies the size of the product
# </ol>
dataservice.noMetadataRecordFoundForProduct.text = No metadata records found for product received from {0}: product={1}, size={2}.
dataservice.noMetadataRecordFoundForProduct.level = WARN

# When the size of the data Cache exceeds a defined value. <br>
# Expected message arguments are:
# <ol>
# <li>maximumSize, configured maximum size
# <li>actualSize, actual size
# </ol>
dataservice.cacheMaximumSizeReached.text = Maximum size reached for Cache: max={0}, size={1}.
dataservice.cacheMaximumSizeReached.level = WARN

# When delivery fails (error, warning raised by the dissemination system ). <br>
# Expected message arguments are:
# <ol>
# <li>user, specifies the destination
# <li>productInfo, specifies the product(s) to deliver
# <li>cause, indicate the cause for the failure
# </ol>
dataservice.deliveryFails.text = Delivery failed on dissemination for: user={0}, product={1}, error={2}.
dataservice.deliveryFails.level = ERROR

# When the size of products in one Staging Post exceeds a configurable size. <br>
# Expected message arguments are:
# <ol>
# <li>maximumSize, configured maximum size
# <li>actualSize, actual size
# </ol>
dataservice.stagingPostMaximumSizeReached.text = Maximum size of products reached for Staging Post: max={0}, count={1}.
dataservice.stagingPostMaximumSizeReached.level = WARN

# Failure to contact a local data source or when extraction fails. <br>
# Expected message arguments are:
# <ol>
# <li>source, specifies the destination
# <li>productInfo, specifies the product(s) to deliver
# <li>cause, indicate the cause for the failure
# </ol>
dataservice.extractionFails.text = Extraction failed: source={0}, product={1}, error={2}.
dataservice.extractionFails.level = ERROR

dataservice.unreachableLocalDataSource.text = Unreachable local data source: source={0}, error={1}.
dataservice.unreachableLocalDataSource.level = ERROR

#Notifies that a file has been reseeded for more than 'vuze.maxReseeds' times.
#The download of this file was still not successfull and the file is therefore dropped and discarded.
# <ol>
# <li>filename
# </ol>
dataservice.maxReseedsExceeded.text = The file {0} has exceeded its maximum number of reseed requests. Since it could not be downloaded successfully, it is dropped and discarded..
dataservice.maxReseedsExceeded.level = ERROR

## ----------------------------------------------------------------------------
## ProductMetadataService Alters
## ----------------------------------------------------------------------------

# The loss or corruption of metadata. <br>
# Expected message arguments are:
# <ol>
# <li>metadataUrn, the metadata URN being tested
# <li>errorMessage, a description of the validation error
# <ol>
metadataservice.metadataValidationFails.text = Corrupted metadata record: metadata={0}, error={1}.
metadataservice.metadataValidationFails.level = ERROR

# When the number of entries in the DAR catalogue exceeds a defined
# threshold. <br>
# Expected message arguments are:
# <ol>
# <li>maximumSize, the configured maximum size
# <li>actualSize, the actual size
# </ol>
metadataservice.tooManyEntriesInCatalogue.text = Maximum number of entries in DAR catalogue exceeded: max={0}, count={1}.
metadataservice.tooManyEntriesInCatalogue.level = WARN

# When harvested metadata records fail schema validation. <br>
# Expected message arguments are:
# <ol>
# <li>metadataUrn, the metadata URN being tested
# <li>errorMessage, a description of the validation error
# </ol>
metadataservice.metadataRecordsFailSchemaValidation.text = Harvested metadata record failed schema validation: record={0}, error={1}.
metadataservice.metadataRecordsFailSchemaValidation.level = WARN

# Harvesting task is complete (information level). <br>
# Expected message arguments are:
# <ol>
# <li>taskInfo, a description of task
# </ol>
metadataservice.harvestingTaskComplete.text = Harvesting task is complete: {0}.
metadataservice.harvestingTaskComplete.level = INFO

# Synchronisation task is complete (information level). <br>
# Expected message arguments are:
# <ol>
# <li>taskInfo, a description of task
# </ol>
metadataservice.synchronizationTaskComplete.text = Synchronisation task is complete: {0}.
metadataservice.synchronizationTaskComplete.level = INFO

# When an authorised user requests a volume data which exceeds the threshold
# for the chosen distribution system. <br>
# Expected message arguments are:
# <ol>
# <li>accountInfo, identifies the user account
# <li>threshold, specifies the configured threshold for the given user
# <li>requestedVolume, specifies the requested data volume
# </ol>
metadataservice.tooManyDataRequestedByUser.text = Volume of data requested by user {0} exceeds limit: {1}, requested data volume: {2}.
metadataservice.tooManyDataRequestedByUser.level = WARN

# Harvesting task is failed (error level). <br>
# Expected message arguments are:
# <ol>
# <li>taskName, harvesting task name
# <li>taskId, harvesting task id
# <li>description, error message
# </ol>
metadataservice.harvestingTaskFail.text = Error during harvesting task {0} ({1}) : {2}.
metadataservice.harvestingTaskFail.level = ERROR

# Synchronisation task is failed (error level). <br>
# Expected message arguments are:
# <ol>
# <li>taskName, harvesting task name
# <li>taskId, harvesting task id
# <li>description, error message
# </ol>
metadataservice.synchronizationTaskFail.text = Error during synchronization task {0} ({1}) : {2}.
metadataservice.synchronizationTaskFail.level = ERROR

## ----------------------------------------------------------------------------
## SecurityService Alters
## ----------------------------------------------------------------------------

# When Administrators and Operators fail authentication. <br>
# Expected message arguments are:
# <ol>
# <li>credentials, specifies the user credentials
# </ol>
securityservice.authenticationFailed.text  = Authentication fails for user: {0}.
securityservice.authenticationFailed.level = WARN

# When any unauthorised access to the system is attempted. <br>
# Expected message arguments are:
# <ol>
# <li>credentials, specifies the user credentials
# </ol>
securityservice.unauthorizedAccessAttempt.text = Unauthorized access attempt to the system from user: {0}.
securityservice.unauthorizedAccessAttempt.level = WARN

# When the number of registered authenticated users exceeds a defined
# threshold. <br>
# Expected message arguments are:
# <ol>
# <li>threshold, configured number of users
# <li>userCount, current number of users
# </ol>
securityservice.tooManyRegisteredUsers.text = Number of registered authenticated users exceeds threshold: {0}, No of users: {1}.
securityservice.tooManyRegisteredUsers.level = WARN

# When the number of active authenticated users exceeds a defined threshold. <br>
# Expected message arguments are:
# <ol>
# <li>threshold, configured number of users
# <li>userCount, current number of users
# </ol>
securityservice.tooManyActiveUsers.text = Number of active authenticated users exceeds threshold: {0}, No of users: {1}.
securityservice.tooManyActiveUsers.level = WARN

# When the number of active anonymous users exceeds a defined threshold. <br>
# Expected message arguments are:
# <ol>
# <li>threshold, configured number of users
# <li>userCount, current number of users
# </ol>
securityservice.tooManyActiveAnonymousUsers.text = Number of active anonymous users exceeds threshold: {0}, No of users: {1}.
securityservice.tooManyActiveAnonymousUsers.level = WARN

# When a user requests an extension of privileges. <br>
# Expected message arguments are:
# <ol>
# <li>credentials, specifies the user credentials
# <li>privileges, specifies the requested privileges
# </ol>
securityservice.userPrivilegesExtensionRequest.text = User {0} has requested an extension of privileges: {1}.
securityservice.userPrivilegesExtensionRequest.level = WARN
